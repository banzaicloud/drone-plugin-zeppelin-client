{
        "paragraphs": [
            {
                "text": "%spark.dep\nz.reset() // clean up previously added artifact and repository\nz.load(\"com.amazonaws:aws-java-sdk:1.7.4\")\nz.load(\"org.apache.hadoop:hadoop-aws:2.7.1\")\nz.fetch().size()\n",
                "user": "anonymous",
                "dateUpdated": "Nov 21, 2017 4:51:54 PM",
                "config": {
                    "editorSetting": {
                        "language": "scala"
                    },
                    "colWidth": 12,
                    "editorMode": "ace/mode/scala",
                    "fontSize": 9,
                    "results": {},
                    "enabled": true
                },
                "settings": {
                    "params": {},
                    "forms": {}
                },
                "results": {
                    "code": "SUCCESS",
                    "msg": [
                        {
                            "type": "TEXT",
                            "data": "res0: Int = 92\n"
                        }
                    ]
                },
                "apps": [],
                "jobName": "paragraph_1511281233190_345802491",
                "id": "20171121-161902_1192653887",
                "dateCreated": "Nov 21, 2017 4:20:33 PM",
                "dateStarted": "Nov 21, 2017 4:51:54 PM",
                "dateFinished": "Nov 21, 2017 4:52:55 PM",
                "status": "FINISHED",
                "progressUpdateIntervalMs": 500
            },
            {
                "title": "Configure spark context",
                "text": "%spark\nsc.hadoopConfiguration.set(\"fs.s3a.access.key\",\"AKIAIPLI65YJJO6HF7UA\")\nsc.hadoopConfiguration.set(\"fs.s3a.secret.key\",\"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\")\nsc.hadoopConfiguration.set(\"fs.s3a.impl\", \"org.apache.hadoop.fs.s3a.S3AFileSystem\")\nsc.hadoopConfiguration.set(\"fs.s3a.buffer.dir\", \"/root/spark/work,/tmp\") ",
                "user": "anonymous",
                "dateUpdated": "Nov 21, 2017 4:53:14 PM",
                "config": {
                    "tableHide": false,
                    "editorSetting": {
                        "language": "scala",
                        "editOnDblClick": false
                    },
                    "colWidth": 12,
                    "editorMode": "ace/mode/scala",
                    "fontSize": 9,
                    "title": true,
                    "results": {},
                    "enabled": true
                },
                "settings": {
                    "params": {},
                    "forms": {}
                },
                "results": {
                    "code": "SUCCESS",
                    "msg": []
                },
                "apps": [],
                "jobName": "paragraph_1511281233191_-1760108652",
                "id": "20170831-205702_465725356",
                "dateCreated": "Nov 21, 2017 4:20:33 PM",
                "dateStarted": "Nov 21, 2017 4:53:14 PM",
                "dateFinished": "Nov 21, 2017 4:53:38 PM",
                "status": "FINISHED",
                "progressUpdateIntervalMs": 500
            },
            {
                "title": "Load the data and manipulate the data (drop invalid lines, create the DF)",
                "text": "%spark\n\n// load the csv into a Data Frame\nval incidentsDF = spark.read\n         .format(\"csv\")\n         .option(\"header\", \"true\") //reading the headers\n         .option(\"mode\", \"DROPMALFORMED\") // drops the malformed lines\n         .load(\"s3a://lp-deps-test/data/Police_Department_Incidents.csv\")\n\n// check the number of rows\nincidentsDF.count\n",
                "user": "anonymous",
                "dateUpdated": "Nov 21, 2017 4:22:14 PM",
                "config": {
                    "tableHide": false,
                    "editorSetting": {
                        "language": "scala",
                        "editOnDblClick": false
                    },
                    "colWidth": 12,
                    "editorMode": "ace/mode/scala",
                    "title": true,
                    "results": {},
                    "enabled": true,
                    "fontSize": 9
                },
                "settings": {
                    "params": {},
                    "forms": {}
                },
                "results": {
                    "code": "SUCCESS",
                    "msg": [
                        {
                            "type": "TEXT",
                            "data": "incidentsDF: org.apache.spark.sql.DataFrame = [IncidntNum: string, Category: string ... 11 more fields]\nres5: Long = 2138115\n"
                        }
                    ]
                },
                "runtimeInfos": {
                    "jobUrl": {
                        "propertyName": "jobUrl",
                        "label": "SPARK JOB",
                        "tooltip": "View in Spark web UI",
                        "group": "spark",
                        "values": [
                            "http://zri-2cxk4912g--2cxwrsgru-1511281258013-driver-svc.default.svc.cluster.local:4040/jobs/job/?id=0",
                            "http://zri-2cxk4912g--2cxwrsgru-1511281258013-driver-svc.default.svc.cluster.local:4040/jobs/job/?id=1"
                        ],
                        "interpreterSettingId": "2CXK4912G"
                    }
                },
                "apps": [],
                "jobName": "paragraph_1511281233191_-1374128535",
                "id": "20171108-161442_1928064495",
                "dateCreated": "Nov 21, 2017 4:20:33 PM",
                "dateStarted": "Nov 21, 2017 4:22:15 PM",
                "dateFinished": "Nov 21, 2017 4:25:30 PM",
                "status": "FINISHED",
                "progressUpdateIntervalMs": 500
            },
            {
                "title": "Set up a map for displaying results on it (leaflet.js)",
                "text": "%angular\n\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" />\n<div id=\"map\" style=\"height: 300px; width: 500px\"></div>\n\n<script type=\"text/javascript\">\nfunction initMap() {\n    var map = L.map('map').setView([37.00, -122.00], 3);\n\n    L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\n        maxZoom: 12,\n        minZoom: 3\n    }).addTo(map);\n\n    var geoMarkers = L.layerGroup().addTo(map);\n    \n    var el = angular.element($('#map').parent('.ng-scope'));\n    angular.element(el).ready(function() {\n        window.locationWatcher = el.scope().compiledScope.$watch('locations', function(newValue, oldValue) {\n            geoMarkers.clearLayers(); //-- if you want to only show new data clear the layer first\n            angular.forEach(newValue, function(incident) {\n                console.log('Data: ' + incident.values[0]+'|'+ incident.values[2])\n                var marker = L.marker([ incident.values[3],incident.values[2] ])\n                  .bindPopup(incident.values[1] + \", Date: \"+incident.values[4])\n                  .addTo(geoMarkers);\n            });\n        })\n    });\n}\n\nif (window.locationWatcher) {\n    // clear existing watcher otherwise we'll have duplicates\n    window.locationWatcher();\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log('Loading Leaflet library');\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js';\n    sc.onload = initMap;\n    sc.onerror = function(err) { alert(err); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>\n",
                "user": "anonymous",
                "dateUpdated": "Nov 21, 2017 4:25:30 PM",
                "config": {
                    "tableHide": false,
                    "editorSetting": {
                        "language": "text",
                        "editOnDblClick": true
                    },
                    "colWidth": 12,
                    "editorMode": "ace/mode/undefined",
                    "editorHide": false,
                    "title": true,
                    "results": {},
                    "enabled": true,
                    "fontSize": 9
                },
                "settings": {
                    "params": {},
                    "forms": {}
                },
                "results": {
                    "code": "ERROR",
                    "msg": [
                        {
                            "type": "TEXT",
                            "data": "Either no interpreter named angular or it is not binded to this note"
                        }
                    ]
                },
                "apps": [],
                "jobName": "paragraph_1511281233192_1244235751",
                "id": "20171108-104917_2003412743",
                "dateCreated": "Nov 21, 2017 4:20:33 PM",
                "status": "ERROR",
                "errorMessage": "java.lang.RuntimeException: Either no interpreter named angular or it is not binded to this note\n\tat org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter(InterpreterFactory.java:100)\n\tat org.apache.zeppelin.notebook.Paragraph.getBindedInterpreter(Paragraph.java:238)\n\tat org.apache.zeppelin.notebook.Paragraph.execute(Paragraph.java:348)\n\tat org.apache.zeppelin.notebook.Note.run(Note.java:618)\n\tat org.apache.zeppelin.socket.NotebookServer.persistAndExecuteSingleParagraph(NotebookServer.java:1817)\n\tat org.apache.zeppelin.socket.NotebookServer.runAllParagraphs(NotebookServer.java:1681)\n\tat org.apache.zeppelin.socket.NotebookServer.onMessage(NotebookServer.java:271)\n\tat org.apache.zeppelin.socket.NotebookSocket.onWebSocketText(NotebookSocket.java:59)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextMessage(JettyListenerEventDriver.java:128)\n\tat org.eclipse.jetty.websocket.common.message.SimpleTextMessage.messageComplete(SimpleTextMessage.java:69)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.appendMessage(AbstractEventDriver.java:65)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextFrame(JettyListenerEventDriver.java:122)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.incomingFrame(AbstractEventDriver.java:161)\n\tat org.eclipse.jetty.websocket.common.WebSocketSession.incomingFrame(WebSocketSession.java:309)\n\tat org.eclipse.jetty.websocket.common.extensions.ExtensionStack.incomingFrame(ExtensionStack.java:214)\n\tat org.eclipse.jetty.websocket.common.Parser.notifyFrame(Parser.java:220)\n\tat org.eclipse.jetty.websocket.common.Parser.parse(Parser.java:258)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.readParse(AbstractWebSocketConnection.java:632)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:480)\n\tat org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\n\tat java.lang.Thread.run(Thread.java:748)\n",
                "progressUpdateIntervalMs": 500
            },
            {
                "title": "Display the latest 100 incidents (Spark DF api)",
                "text": "%spark\n\nvar resDF = incidentsDF.select(\"IncidntNum\", \"Category\", \"X\", \"Y\",\"Date\",\"Time\").orderBy(desc(\"Date\")).orderBy(desc(\"Time\"))\n\nz.angularBind(\"locations\", resDF.head(100)) // this is what sends the data to the frontend\n",
                "dateUpdated": "Nov 21, 2017 4:20:33 PM",
                "config": {
                    "tableHide": false,
                    "editorSetting": {
                        "language": "scala",
                        "editOnDblClick": false
                    },
                    "colWidth": 12,
                    "editorMode": "ace/mode/scala",
                    "title": true,
                    "results": {
                        "0": {
                            "graph": {
                                "mode": "table",
                                "height": 438,
                                "optionOpen": false
                            }
                        }
                    },
                    "enabled": true
                },
                "settings": {
                    "params": {},
                    "forms": {}
                },
                "apps": [],
                "jobName": "paragraph_1511281233193_1565620753",
                "id": "20171108-112715_119964082",
                "dateCreated": "Nov 21, 2017 4:20:33 PM",
                "status": "READY",
                "errorMessage": "",
                "progressUpdateIntervalMs": 500
            },
            {
                "title": "Display the first 100 incidents for a given category (Spark SQL)",
                "text": "%spark\n\n// register the data as a temp table\nincidentsDF.registerTempTable(\"incidents\")\n\nval sqlDF = spark.sql(\"SELECT IncidntNum, Category, X, Y FROM incidents\")\nz.angularBind(\"locations\", sqlDF.head(100)) // this is what sends the data to the frontend\n\n// register the data as a temp table\nspark.catalog.dropTempView(\"incidents\")\n",
                "dateUpdated": "Nov 21, 2017 4:20:33 PM",
                "config": {
                    "tableHide": false,
                    "editorSetting": {
                        "language": "scala",
                        "editOnDblClick": false
                    },
                    "colWidth": 12,
                    "editorMode": "ace/mode/scala",
                    "editorHide": false,
                    "title": true,
                    "results": {
                        "0": {
                            "graph": {
                                "mode": "table",
                                "height": 438,
                                "optionOpen": false
                            }
                        }
                    },
                    "enabled": true
                },
                "settings": {
                    "params": {},
                    "forms": {}
                },
                "apps": [],
                "jobName": "paragraph_1511281233193_-1916556934",
                "id": "20171110-121044_1386039675",
                "dateCreated": "Nov 21, 2017 4:20:33 PM",
                "status": "READY",
                "errorMessage": "",
                "progressUpdateIntervalMs": 500
            },
            {
                "text": "%sql \nselect * from incidents limit 100\n",
                "dateUpdated": "Nov 21, 2017 4:20:33 PM",
                "config": {
                    "tableHide": false,
                    "editorSetting": {
                        "language": "sql",
                        "editOnDblClick": false
                    },
                    "colWidth": 12,
                    "editorMode": "ace/mode/sql",
                    "results": {
                        "0": {
                            "graph": {
                                "mode": "table",
                                "height": 300,
                                "optionOpen": false,
                                "setting": {
                                    "stackedAreaChart": {
                                        "style": "stream"
                                    }
                                },
                                "commonSetting": {},
                                "keys": [
                                    {
                                        "name": "incidNum",
                                        "index": 0,
                                        "aggr": "sum"
                                    }
                                ],
                                "groups": [],
                                "values": [
                                    {
                                        "name": "count(1)",
                                        "index": 1,
                                        "aggr": "sum"
                                    }
                                ]
                            },
                            "helium": {}
                        }
                    },
                    "enabled": true
                },
                "settings": {
                    "params": {},
                    "forms": {}
                },
                "apps": [],
                "jobName": "paragraph_1511281233195_-1617718726",
                "id": "20170904-175301_1676233597",
                "dateCreated": "Nov 21, 2017 4:20:33 PM",
                "status": "READY",
                "errorMessage": "",
                "progressUpdateIntervalMs": 500
            },
            {
                "text": "%sql\n",
                "dateUpdated": "Nov 21, 2017 4:20:33 PM",
                "config": {
                    "tableHide": false,
                    "editorSetting": {
                        "language": "sql",
                        "editOnDblClick": false
                    },
                    "colWidth": 12,
                    "editorMode": "ace/mode/sql",
                    "results": {},
                    "enabled": true
                },
                "settings": {
                    "params": {},
                    "forms": {}
                },
                "apps": [],
                "jobName": "paragraph_1511281233195_1032534007",
                "id": "20171107-170825_82319106",
                "dateCreated": "Nov 21, 2017 4:20:33 PM",
                "status": "READY",
                "errorMessage": "",
                "progressUpdateIntervalMs": 500
            }
        ],
        "name": "sf-police-incidents",
        "id": "2CXWRSGRU",
        "angularObjects": {
            "2CXK4912G::2CXWRSGRU": []
        },
        "config": {},
        "info": {}
    }
