{
	"info": {
		"name": "Zeppelin Notebook API",
		"_postman_id": "1556ab72-e78b-d507-020b-eddbccf60455",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "List Notebooks",
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://{{zeppelin_server}}/api/notebook",
					"protocol": "http",
					"host": [
						"{{zeppelin_server}}"
					],
					"path": [
						"api",
						"notebook"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Import Notebook",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"paragraphs\": [\n            {\n                \"text\": \"%spark.dep\\nz.reset() // clean up previously added artifact and repository\\nz.load(\\\"com.amazonaws:aws-java-sdk:1.7.4\\\")\\nz.load(\\\"org.apache.hadoop:hadoop-aws:2.7.1\\\")\\nz.fetch().size()\\n\",\n                \"user\": \"anonymous\",\n                \"dateUpdated\": \"Nov 21, 2017 4:51:54 PM\",\n                \"config\": {\n                    \"editorSetting\": {\n                        \"language\": \"scala\"\n                    },\n                    \"colWidth\": 12,\n                    \"editorMode\": \"ace/mode/scala\",\n                    \"fontSize\": 9,\n                    \"results\": {},\n                    \"enabled\": true\n                },\n                \"settings\": {\n                    \"params\": {},\n                    \"forms\": {}\n                },\n                \"results\": {\n                    \"code\": \"SUCCESS\",\n                    \"msg\": [\n                        {\n                            \"type\": \"TEXT\",\n                            \"data\": \"res0: Int = 92\\n\"\n                        }\n                    ]\n                },\n                \"apps\": [],\n                \"jobName\": \"paragraph_1511281233190_345802491\",\n                \"id\": \"20171121-161902_1192653887\",\n                \"dateCreated\": \"Nov 21, 2017 4:20:33 PM\",\n                \"dateStarted\": \"Nov 21, 2017 4:51:54 PM\",\n                \"dateFinished\": \"Nov 21, 2017 4:52:55 PM\",\n                \"status\": \"FINISHED\",\n                \"progressUpdateIntervalMs\": 500\n            },\n            {\n                \"title\": \"Configure spark context\",\n                \"text\": \"%spark\\nsc.hadoopConfiguration.set(\\\"fs.s3a.access.key\\\",\\\"AKIAIPLI65YJJO6HF7UA\\\")\\nsc.hadoopConfiguration.set(\\\"fs.s3a.secret.key\\\",\\\"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\\\")\\nsc.hadoopConfiguration.set(\\\"fs.s3a.impl\\\", \\\"org.apache.hadoop.fs.s3a.S3AFileSystem\\\")\\nsc.hadoopConfiguration.set(\\\"fs.s3a.buffer.dir\\\", \\\"/root/spark/work,/tmp\\\") \",\n                \"user\": \"anonymous\",\n                \"dateUpdated\": \"Nov 21, 2017 4:53:14 PM\",\n                \"config\": {\n                    \"tableHide\": false,\n                    \"editorSetting\": {\n                        \"language\": \"scala\",\n                        \"editOnDblClick\": false\n                    },\n                    \"colWidth\": 12,\n                    \"editorMode\": \"ace/mode/scala\",\n                    \"fontSize\": 9,\n                    \"title\": true,\n                    \"results\": {},\n                    \"enabled\": true\n                },\n                \"settings\": {\n                    \"params\": {},\n                    \"forms\": {}\n                },\n                \"results\": {\n                    \"code\": \"SUCCESS\",\n                    \"msg\": []\n                },\n                \"apps\": [],\n                \"jobName\": \"paragraph_1511281233191_-1760108652\",\n                \"id\": \"20170831-205702_465725356\",\n                \"dateCreated\": \"Nov 21, 2017 4:20:33 PM\",\n                \"dateStarted\": \"Nov 21, 2017 4:53:14 PM\",\n                \"dateFinished\": \"Nov 21, 2017 4:53:38 PM\",\n                \"status\": \"FINISHED\",\n                \"progressUpdateIntervalMs\": 500\n            },\n            {\n                \"title\": \"Load the data and manipulate the data (drop invalid lines, create the DF)\",\n                \"text\": \"%spark\\n\\n// load the csv into a Data Frame\\nval incidentsDF = spark.read\\n         .format(\\\"csv\\\")\\n         .option(\\\"header\\\", \\\"true\\\") //reading the headers\\n         .option(\\\"mode\\\", \\\"DROPMALFORMED\\\") // drops the malformed lines\\n         .load(\\\"s3a://lp-deps-test/data/Police_Department_Incidents.csv\\\")\\n\\n// check the number of rows\\nincidentsDF.count\\n\",\n                \"user\": \"anonymous\",\n                \"dateUpdated\": \"Nov 21, 2017 4:22:14 PM\",\n                \"config\": {\n                    \"tableHide\": false,\n                    \"editorSetting\": {\n                        \"language\": \"scala\",\n                        \"editOnDblClick\": false\n                    },\n                    \"colWidth\": 12,\n                    \"editorMode\": \"ace/mode/scala\",\n                    \"title\": true,\n                    \"results\": {},\n                    \"enabled\": true,\n                    \"fontSize\": 9\n                },\n                \"settings\": {\n                    \"params\": {},\n                    \"forms\": {}\n                },\n                \"results\": {\n                    \"code\": \"SUCCESS\",\n                    \"msg\": [\n                        {\n                            \"type\": \"TEXT\",\n                            \"data\": \"incidentsDF: org.apache.spark.sql.DataFrame = [IncidntNum: string, Category: string ... 11 more fields]\\nres5: Long = 2138115\\n\"\n                        }\n                    ]\n                },\n                \"runtimeInfos\": {\n                    \"jobUrl\": {\n                        \"propertyName\": \"jobUrl\",\n                        \"label\": \"SPARK JOB\",\n                        \"tooltip\": \"View in Spark web UI\",\n                        \"group\": \"spark\",\n                        \"values\": [\n                            \"http://zri-2cxk4912g--2cxwrsgru-1511281258013-driver-svc.default.svc.cluster.local:4040/jobs/job/?id=0\",\n                            \"http://zri-2cxk4912g--2cxwrsgru-1511281258013-driver-svc.default.svc.cluster.local:4040/jobs/job/?id=1\"\n                        ],\n                        \"interpreterSettingId\": \"2CXK4912G\"\n                    }\n                },\n                \"apps\": [],\n                \"jobName\": \"paragraph_1511281233191_-1374128535\",\n                \"id\": \"20171108-161442_1928064495\",\n                \"dateCreated\": \"Nov 21, 2017 4:20:33 PM\",\n                \"dateStarted\": \"Nov 21, 2017 4:22:15 PM\",\n                \"dateFinished\": \"Nov 21, 2017 4:25:30 PM\",\n                \"status\": \"FINISHED\",\n                \"progressUpdateIntervalMs\": 500\n            },\n            {\n                \"title\": \"Set up a map for displaying results on it (leaflet.js)\",\n                \"text\": \"%angular\\n\\n<link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\\\" />\\n<div id=\\\"map\\\" style=\\\"height: 300px; width: 500px\\\"></div>\\n\\n<script type=\\\"text/javascript\\\">\\nfunction initMap() {\\n    var map = L.map('map').setView([37.00, -122.00], 3);\\n\\n    L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\\n        attribution: 'Map data &copy; <a href=\\\"http://openstreetmap.org\\\">OpenStreetMap</a> contributors',\\n        maxZoom: 12,\\n        minZoom: 3\\n    }).addTo(map);\\n\\n    var geoMarkers = L.layerGroup().addTo(map);\\n    \\n    var el = angular.element($('#map').parent('.ng-scope'));\\n    angular.element(el).ready(function() {\\n        window.locationWatcher = el.scope().compiledScope.$watch('locations', function(newValue, oldValue) {\\n            geoMarkers.clearLayers(); //-- if you want to only show new data clear the layer first\\n            angular.forEach(newValue, function(incident) {\\n                console.log('Data: ' + incident.values[0]+'|'+ incident.values[2])\\n                var marker = L.marker([ incident.values[3],incident.values[2] ])\\n                  .bindPopup(incident.values[1] + \\\", Date: \\\"+incident.values[4])\\n                  .addTo(geoMarkers);\\n            });\\n        })\\n    });\\n}\\n\\nif (window.locationWatcher) {\\n    // clear existing watcher otherwise we'll have duplicates\\n    window.locationWatcher();\\n}\\n\\n// ensure we only load the script once, seems to cause issues otherwise\\nif (window.L) {\\n    initMap();\\n} else {\\n    console.log('Loading Leaflet library');\\n    var sc = document.createElement('script');\\n    sc.type = 'text/javascript';\\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js';\\n    sc.onload = initMap;\\n    sc.onerror = function(err) { alert(err); }\\n    document.getElementsByTagName('head')[0].appendChild(sc);\\n}\\n</script>\\n\",\n                \"user\": \"anonymous\",\n                \"dateUpdated\": \"Nov 21, 2017 4:25:30 PM\",\n                \"config\": {\n                    \"tableHide\": false,\n                    \"editorSetting\": {\n                        \"language\": \"text\",\n                        \"editOnDblClick\": true\n                    },\n                    \"colWidth\": 12,\n                    \"editorMode\": \"ace/mode/undefined\",\n                    \"editorHide\": false,\n                    \"title\": true,\n                    \"results\": {},\n                    \"enabled\": true,\n                    \"fontSize\": 9\n                },\n                \"settings\": {\n                    \"params\": {},\n                    \"forms\": {}\n                },\n                \"results\": {\n                    \"code\": \"ERROR\",\n                    \"msg\": [\n                        {\n                            \"type\": \"TEXT\",\n                            \"data\": \"Either no interpreter named angular or it is not binded to this note\"\n                        }\n                    ]\n                },\n                \"apps\": [],\n                \"jobName\": \"paragraph_1511281233192_1244235751\",\n                \"id\": \"20171108-104917_2003412743\",\n                \"dateCreated\": \"Nov 21, 2017 4:20:33 PM\",\n                \"status\": \"ERROR\",\n                \"errorMessage\": \"java.lang.RuntimeException: Either no interpreter named angular or it is not binded to this note\\n\\tat org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter(InterpreterFactory.java:100)\\n\\tat org.apache.zeppelin.notebook.Paragraph.getBindedInterpreter(Paragraph.java:238)\\n\\tat org.apache.zeppelin.notebook.Paragraph.execute(Paragraph.java:348)\\n\\tat org.apache.zeppelin.notebook.Note.run(Note.java:618)\\n\\tat org.apache.zeppelin.socket.NotebookServer.persistAndExecuteSingleParagraph(NotebookServer.java:1817)\\n\\tat org.apache.zeppelin.socket.NotebookServer.runAllParagraphs(NotebookServer.java:1681)\\n\\tat org.apache.zeppelin.socket.NotebookServer.onMessage(NotebookServer.java:271)\\n\\tat org.apache.zeppelin.socket.NotebookSocket.onWebSocketText(NotebookSocket.java:59)\\n\\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextMessage(JettyListenerEventDriver.java:128)\\n\\tat org.eclipse.jetty.websocket.common.message.SimpleTextMessage.messageComplete(SimpleTextMessage.java:69)\\n\\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.appendMessage(AbstractEventDriver.java:65)\\n\\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextFrame(JettyListenerEventDriver.java:122)\\n\\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.incomingFrame(AbstractEventDriver.java:161)\\n\\tat org.eclipse.jetty.websocket.common.WebSocketSession.incomingFrame(WebSocketSession.java:309)\\n\\tat org.eclipse.jetty.websocket.common.extensions.ExtensionStack.incomingFrame(ExtensionStack.java:214)\\n\\tat org.eclipse.jetty.websocket.common.Parser.notifyFrame(Parser.java:220)\\n\\tat org.eclipse.jetty.websocket.common.Parser.parse(Parser.java:258)\\n\\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.readParse(AbstractWebSocketConnection.java:632)\\n\\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:480)\\n\\tat org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\\n\\tat java.lang.Thread.run(Thread.java:748)\\n\",\n                \"progressUpdateIntervalMs\": 500\n            },\n            {\n                \"title\": \"Display the latest 100 incidents (Spark DF api)\",\n                \"text\": \"%spark\\n\\nvar resDF = incidentsDF.select(\\\"IncidntNum\\\", \\\"Category\\\", \\\"X\\\", \\\"Y\\\",\\\"Date\\\",\\\"Time\\\").orderBy(desc(\\\"Date\\\")).orderBy(desc(\\\"Time\\\"))\\n\\nz.angularBind(\\\"locations\\\", resDF.head(100)) // this is what sends the data to the frontend\\n\",\n                \"dateUpdated\": \"Nov 21, 2017 4:20:33 PM\",\n                \"config\": {\n                    \"tableHide\": false,\n                    \"editorSetting\": {\n                        \"language\": \"scala\",\n                        \"editOnDblClick\": false\n                    },\n                    \"colWidth\": 12,\n                    \"editorMode\": \"ace/mode/scala\",\n                    \"title\": true,\n                    \"results\": {\n                        \"0\": {\n                            \"graph\": {\n                                \"mode\": \"table\",\n                                \"height\": 438,\n                                \"optionOpen\": false\n                            }\n                        }\n                    },\n                    \"enabled\": true\n                },\n                \"settings\": {\n                    \"params\": {},\n                    \"forms\": {}\n                },\n                \"apps\": [],\n                \"jobName\": \"paragraph_1511281233193_1565620753\",\n                \"id\": \"20171108-112715_119964082\",\n                \"dateCreated\": \"Nov 21, 2017 4:20:33 PM\",\n                \"status\": \"READY\",\n                \"errorMessage\": \"\",\n                \"progressUpdateIntervalMs\": 500\n            },\n            {\n                \"title\": \"Display the first 100 incidents for a given category (Spark SQL)\",\n                \"text\": \"%spark\\n\\n// register the data as a temp table\\nincidentsDF.registerTempTable(\\\"incidents\\\")\\n\\nval sqlDF = spark.sql(\\\"SELECT IncidntNum, Category, X, Y FROM incidents\\\")\\nz.angularBind(\\\"locations\\\", sqlDF.head(100)) // this is what sends the data to the frontend\\n\\n// register the data as a temp table\\nspark.catalog.dropTempView(\\\"incidents\\\")\\n\",\n                \"dateUpdated\": \"Nov 21, 2017 4:20:33 PM\",\n                \"config\": {\n                    \"tableHide\": false,\n                    \"editorSetting\": {\n                        \"language\": \"scala\",\n                        \"editOnDblClick\": false\n                    },\n                    \"colWidth\": 12,\n                    \"editorMode\": \"ace/mode/scala\",\n                    \"editorHide\": false,\n                    \"title\": true,\n                    \"results\": {\n                        \"0\": {\n                            \"graph\": {\n                                \"mode\": \"table\",\n                                \"height\": 438,\n                                \"optionOpen\": false\n                            }\n                        }\n                    },\n                    \"enabled\": true\n                },\n                \"settings\": {\n                    \"params\": {},\n                    \"forms\": {}\n                },\n                \"apps\": [],\n                \"jobName\": \"paragraph_1511281233193_-1916556934\",\n                \"id\": \"20171110-121044_1386039675\",\n                \"dateCreated\": \"Nov 21, 2017 4:20:33 PM\",\n                \"status\": \"READY\",\n                \"errorMessage\": \"\",\n                \"progressUpdateIntervalMs\": 500\n            },\n            {\n                \"text\": \"%sql \\nselect * from incidents limit 100\\n\",\n                \"dateUpdated\": \"Nov 21, 2017 4:20:33 PM\",\n                \"config\": {\n                    \"tableHide\": false,\n                    \"editorSetting\": {\n                        \"language\": \"sql\",\n                        \"editOnDblClick\": false\n                    },\n                    \"colWidth\": 12,\n                    \"editorMode\": \"ace/mode/sql\",\n                    \"results\": {\n                        \"0\": {\n                            \"graph\": {\n                                \"mode\": \"table\",\n                                \"height\": 300,\n                                \"optionOpen\": false,\n                                \"setting\": {\n                                    \"stackedAreaChart\": {\n                                        \"style\": \"stream\"\n                                    }\n                                },\n                                \"commonSetting\": {},\n                                \"keys\": [\n                                    {\n                                        \"name\": \"incidNum\",\n                                        \"index\": 0,\n                                        \"aggr\": \"sum\"\n                                    }\n                                ],\n                                \"groups\": [],\n                                \"values\": [\n                                    {\n                                        \"name\": \"count(1)\",\n                                        \"index\": 1,\n                                        \"aggr\": \"sum\"\n                                    }\n                                ]\n                            },\n                            \"helium\": {}\n                        }\n                    },\n                    \"enabled\": true\n                },\n                \"settings\": {\n                    \"params\": {},\n                    \"forms\": {}\n                },\n                \"apps\": [],\n                \"jobName\": \"paragraph_1511281233195_-1617718726\",\n                \"id\": \"20170904-175301_1676233597\",\n                \"dateCreated\": \"Nov 21, 2017 4:20:33 PM\",\n                \"status\": \"READY\",\n                \"errorMessage\": \"\",\n                \"progressUpdateIntervalMs\": 500\n            },\n            {\n                \"text\": \"%sql\\n\",\n                \"dateUpdated\": \"Nov 21, 2017 4:20:33 PM\",\n                \"config\": {\n                    \"tableHide\": false,\n                    \"editorSetting\": {\n                        \"language\": \"sql\",\n                        \"editOnDblClick\": false\n                    },\n                    \"colWidth\": 12,\n                    \"editorMode\": \"ace/mode/sql\",\n                    \"results\": {},\n                    \"enabled\": true\n                },\n                \"settings\": {\n                    \"params\": {},\n                    \"forms\": {}\n                },\n                \"apps\": [],\n                \"jobName\": \"paragraph_1511281233195_1032534007\",\n                \"id\": \"20171107-170825_82319106\",\n                \"dateCreated\": \"Nov 21, 2017 4:20:33 PM\",\n                \"status\": \"READY\",\n                \"errorMessage\": \"\",\n                \"progressUpdateIntervalMs\": 500\n            }\n        ],\n        \"name\": \"sf-police-incidents\",\n        \"id\": \"2CXWRSGRU\",\n        \"angularObjects\": {\n            \"2CXK4912G::2CXWRSGRU\": []\n        },\n        \"config\": {},\n        \"info\": {}\n    }"
				},
				"url": {
					"raw": "http://{{zeppelin_server}}/api/notebook/import",
					"protocol": "http",
					"host": [
						"{{zeppelin_server}}"
					],
					"path": [
						"api",
						"notebook",
						"import"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Get Notebook",
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://{{zeppelin_server}}/api/notebook/2A94M5J1Z",
					"protocol": "http",
					"host": [
						"{{zeppelin_server}}"
					],
					"path": [
						"api",
						"notebook",
						"2A94M5J1Z"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Delete Notebook",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://{{zeppelin_server}}/api/notebook/2CXX5H1RR",
					"protocol": "http",
					"host": [
						"{{zeppelin_server}}"
					],
					"path": [
						"api",
						"notebook",
						"2CXX5H1RR"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Run Notebook",
			"request": {
				"method": "POST",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://{{zeppelin_server}}/api/notebook/job/2CZD6ZSRY?waitToFinish=false",
					"protocol": "http",
					"host": [
						"{{zeppelin_server}}"
					],
					"path": [
						"api",
						"notebook",
						"job",
						"2CZD6ZSRY"
					],
					"query": [
						{
							"key": "waitToFinish",
							"value": "false",
							"equals": true
						}
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Get Notebook Status",
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://{{zeppelin_server}}/api/notebook/job/2CZMQ2Q8Z/",
					"protocol": "http",
					"host": [
						"{{zeppelin_server}}"
					],
					"path": [
						"api",
						"notebook",
						"job",
						"2CZMQ2Q8Z",
						""
					]
				},
				"description": ""
			},
			"response": []
		}
	]
}